REQUISITI:

Tabella requisiti: R17F è NF. R2NF-R4NF sono F.

Diagramma CdU: Homepage di Utente?

Scenari: scenari inclusi (Login) messi come precondizione. Estendenti non indicati nell'esteso. In ProponiLavoro gli scenari alternativi sono precondizioni. In GestioneAmministratore si parla già di log.

Requisiti sicurezza: R7NF è F (poi sparisce)

 

ANALISI:

Tabelle informazioni/flusso: diverse informazioni legate all'interfaccia.

Tabella ruoli: la numerosità è input, non output.

Tabelle ruolo/informazioni: username è input/output.

Modello del dominio: che roba è?

DIagramma dei package: cos'è InterfacciaLog?

Diagrammi di sequenza: interazione col dominio quasi nulla. Manca totalmente la scrittura sul log.

Piano del collaudo: API?

 

PROGETTAZIONE:

Interfacce: a che serve ILog vuota? Chi scrive sul log?

Diagrammi di dettaglio: ma non unsavano l'ORM di Rails? DI nuovo manca il log.

E/R: il log sul DB? Tipo in Utente è già progettazione logica.

Diagrammi di deployment: assenti.

-----

REQUISITI

17F: non deve -> non è funzionale

2NF: funzionalità

accentate grave (perché, cioé, caffé, é)

homepage dal diagramma dei casi d'uso non va bene
	non collegata a nulla

login non compare all'interno del caso d'uso gestione dell'account

gestione profilo, non c'è lista collaborazioni

proponi lavoro: un cliente può procedere senza dover effettuare l'autenticazione nuovamente???
	cosa succede se il fabbisogno informativo dell cliente non può essere soddisfatto dello scenario principale

un cliente non deve essere sospeso per fare proponi lavoro: è un prerequisito

5. L’Amministratore accede alla sezione dedicata visualiz-
zazione dei Log di Sistema, dalla quale potrà filtrare anche
le Segnalazioni. Potrà scaricare i Log sul disco.
(AVVIENE DOPO LA SICUREZZA)!!
bisogna metterlo solo sotto

inutile parlare di backup prima della persistenza
	è funzionale
	togliere!!


ANALISI

le tabelle informazioni e flusso non devono contenere roba di interfaccia
	solo quello che c'è nel modello del dominio/controller

segnala ad amministratore deve avere le informazioni di input/output!!! quindi anche l'utente segnalato

analisi dei vincoli
	togliendo homepage

potenzialmente infinito/numero predefinito
	pensare ad un massimo di utenti!!
		oridine del milione

username lettura/scrittura

uml
	sintassi usata: non UML!!
	mischiamo classi con controller con attributi
	password nel modello del dominio: NO!
		così è in memoria
	
	registrazione non vede registred user
	
	in realtà erano attributi

	pensiamo gia al principio di singola responsabilità
	
	d'accordo su cliente
	
	freccie di implementazione di interfaccia tra cliente e registred user
		registred user 

	tag potrebbe essere un entità a se stante OK

	LOG deve stare da se!

	abbiamo chiamato come LOG : ENTRY DEL LOG

	freccia di USES

	2 associazioni 1:n uno si chiama utente e uno destinatario

	non avere Motivazione come classe
		composizione 1:1 ha senso che questa sia un entità?

package
	interfaccialog
		controller del log
	dentro c'è il controller per scrivere sul log
	log doveva essere in azzurro

diagrammi di sequenza
	utente che fa la show() NO!
		che comandi manda alla homepage?
	i controller o view fanno la show()!
	
	non ci sono da nessuna parte

	ci devono essere delle interazioni tra codemonkey e gestione account

	in nessuno dei diagrammi c'è la scrittura sul log
	
	l'interazione con il log sarà la stessa dopo quindi non sarà mostrata

	dominio
		autenticazione no interazione dominio ok!

		get profilo codemonkey interagirà con il dominio
			in azzurro

		get lista collaborazioni

		accetta collaborazione
			modifica l'oggetto collaborazione
		
		segnalazione
		crea oggetto segnalazione

API
	non scrivere così:
		non forniamo facade

diag componenti
	ok
	siccome tutti questi server si interfacciano al log
		la scrittura è solo su Log

dettaglio del dominio
	ok

togliere interfaccia vuota

controllers ok

non si capisce chi scrive sul log
	siccome ereditano da controller possono scrivere e leggere su database
	o abbiamo un controller che scrive sul log
	dentro contoller log c'è qualcosa per accedere al log

forse mettere nella progettazione delle interazioni
dentro il controller c'è il filewriter
poi filereader
????

in questo caso i diagrammi dei package sono corretti

altrimenti i diagrammi sono sbagliati se il controllerlog che ha filereader e filewriter

avendo il broker
	le view nei diagrammi di sequenza devono passare dal broker
	i controller non fanno direttamente la sho ma passano dal broker

ORM:
	no db connection
	ma orm di rails

per spiegarlo è più semplice usare forza bruta


ER
	log e persistenza sono separati
		dovrebbero essere su due ER diversi
			log su DBMS non è fatto per letture e scritture sequenziali, meglio usare files

dentro utenti abbiamo tipo
	selettore della gerarchia
		già progettazione logica
			la gerarchia la collasso verso l'alto
		ma er è progettazoine concettuale

collaborazioni non ha associazioni verso utenti!!
	uno cliente e uno codemonkey

togliere log da DBMS!!

mancano i diagrammi di deployment!!
	guardare villaggio turistico
		sostanzialmente deriva dal diagramma dei componenti

	
	
Cose da aggiustare principalmente: DIAGRAMMA DI DOMINIO
